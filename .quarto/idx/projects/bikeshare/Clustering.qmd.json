{"title":"Bikeshare User Clustering","markdown":{"yaml":{"title":"Bikeshare User Clustering","sidebar":"Project","section-divs":true,"echo":false,"execute":{"freeze":"auto"}},"headingText":"Introduction","containsRefs":false,"markdown":"\n```{python}\nimport pandas as pd\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import silhouette_samples, silhouette_score\nimport matplotlib.cm as cm\nimport plotly.express as px\nfrom IPython.display import display, Markdown\n\n\nuser_df = pd.read_csv('data/user_data.csv')\ncluster_cols = ['trip_ct', 'is_winter', 'is_night','one_way', 'duration']\nX = user_df.loc[:, cluster_cols].fillna(-1).values\n```\n\nWe were interested in how user patterns might vary between Omaha and Lincoln. Omaha is a larger city (metro population of about one million people), whereas Lincoln is about a quarter of the size and a college town. To compare users, we first filtered out admin and other invalid trips. Most of the available data pertains to time, so we made maximum use of the timestamps. We considered if a person made a trip in the winter (defined as December, January, February, and March) as a measure of their being an all-season cyclist. We also considered if they biked at night. Nightfall is a bit of a tricky variable. Fortunately, the Python `suntime` package can give us the sunrise and sunset time on any day, adjusting for latitude and daylight saving time. We consider whether a trip is one-way, meaning it returns to the same station at which it started its trip. This variable provides an indication of if the trip was utilitarian or recreational. Finally, we consider the trip count and average duration of trips by user.\n\n## Perform Siloutte Analysis To Define K Value for K-Means Clustering\nWe use the k-means clustering to define user groups. This algorithm clusters observations (in our case users) in order to maximize the cross-cluster variation in the input *features*. Our *features* are defined by the variables described above. We use siloutte analysis to find the optimal number of clusters. The silhouette value is a measure of how similar an observation is to its own cluster (cohesion) compared to other clusters (separation). The silhouette ranges from âˆ’1 to +1, where a high value indicates that the object is well matched to its own cluster and poorly matched to neighboring clusters. Our results suggest the that four clusters are ideal here.\n\n```{python}\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples, silhouette_score\nimport matplotlib.cm as cm\nimport json\nimport os\n\n\nrun_K_mean_silhouette = False\n\ncluster_details = {}\n\nif run_K_mean_silhouette:\n\n    range_n_clusters = [2, 3, 4, 5, 6]\n\n    for n_clusters in range_n_clusters:\n        # Create a subplot with 1 row and 2 columns\n        fig, (ax1, ax2) = plt.subplots(1, 2)\n        fig.set_size_inches(18, 7)\n\n        # The 1st subplot is the silhouette plot\n        # The silhouette coefficient can range from -1, 1\n        ax1.set_xlim([-1, 1])\n        # The (n_clusters+1)*10 is for inserting blank space between silhouette\n        # plots of individual clusters, to demarcate them clearly.\n        ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n\n        # Initialize the clusterer with n_clusters value and a random generator\n        # seed of 10 for reproducibility.\n        clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n        cluster_labels = clusterer.fit_predict(X)\n\n        # The silhouette_score gives the average value for all the samples.\n        # This gives a perspective into the density and separation of the formed\n        # clusters\n        silhouette_avg = silhouette_score(X, cluster_labels)\n        print(\n            \"For n_clusters =\",\n            n_clusters,\n            \"The average silhouette_score is :\",\n            silhouette_avg,\n        )\n\n        cluster_details[n_clusters] = {\n            \"silhouette_score\": silhouette_avg,\n        }\n\n        # Compute the silhouette scores for each sample\n        sample_silhouette_values = silhouette_samples(X, cluster_labels)\n\n        y_lower = 10\n        for i in range(n_clusters):\n            # Aggregate the silhouette scores for samples belonging to\n            # cluster i, and sort them\n            ith_cluster_silhouette_values = sample_silhouette_values[cluster_labels == i]\n\n            ith_cluster_silhouette_values.sort()\n\n            size_cluster_i = ith_cluster_silhouette_values.shape[0]\n            y_upper = y_lower + size_cluster_i\n\n            color = cm.nipy_spectral(float(i) / n_clusters)\n            ax1.fill_betweenx(\n                np.arange(y_lower, y_upper),\n                0,\n                ith_cluster_silhouette_values,\n                facecolor=color,\n                edgecolor=color,\n                alpha=0.7,\n            )\n\n            # Label the silhouette plots with their cluster numbers at the middle\n            ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n            # Compute the new y_lower for next plot\n            y_lower = y_upper + 10  # 10 for the 0 samples\n\n        ax1.set_title(\"The silhouette plot for the various clusters.\")\n        ax1.set_xlabel(\"The silhouette coefficient values\")\n        ax1.set_ylabel(\"Cluster label\")\n\n        # The vertical line for average silhouette score of all the values\n        ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n        ax1.set_yticks([])  # Clear the yaxis labels / ticks\n        ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\n        # 2nd Plot showing the actual clusters formed\n        colors = cm.nipy_spectral(cluster_labels.astype(float) / n_clusters)\n        ax2.scatter(\n            X[:, 0], X[:, 1], marker=\".\", s=30, lw=0, alpha=0.7, c=colors, edgecolor=\"k\"\n        )\n\n        # Labeling the clusters\n        centers = clusterer.cluster_centers_\n        # Draw white circles at cluster centers\n        ax2.scatter(\n            centers[:, 0],\n            centers[:, 1],\n            marker=\"o\",\n            c=\"white\",\n            alpha=1,\n            s=200,\n            edgecolor=\"k\",\n        )\n\n        for i, c in enumerate(centers):\n            ax2.scatter(c[0], c[1], marker=\"$%d$\" %\n                        i, alpha=1, s=50, edgecolor=\"k\")\n\n        ax2.set_title(\"The visualization of the clustered data.\")\n        ax2.set_xlabel(\"Feature space for the 1st feature\")\n        ax2.set_ylabel(\"Feature space for the 2nd feature\")\n\n        plt.suptitle(\n            \"Silhouette analysis for KMeans clustering on sample data with n_clusters = %d\"\n            % n_clusters,\n            fontsize=14,\n            fontweight=\"bold\",\n        )\n\n        # Save the figure\n        os.makedirs('kmeans_silhouette_plots', exist_ok=True)\n        fig_width = 20  # Set the figure width to 20 inches\n        aspect_ratio = fig.get_figheight() / fig.get_figwidth()\n        fig_height = fig_width * aspect_ratio\n        fig.set_size_inches(fig_width, fig_height)\n        plt.savefig(\n            f'kmeans_silhouette_plots/silhouette_score_{n_clusters}.png', dpi=700, bbox_inches='tight', pad_inches=0.2)\n        plt.close(fig)\n\n    with open('data/cluster_details.json', 'w') as f:\n        json.dump(cluster_details, f)\n\nelse:\n    try:\n        with open('data/cluster_details.json', 'r') as f:\n            cluster_details = json.load(f)\n\n        for i in cluster_details:\n            print(f\"For n_clusters = {i} The average silhouette_score is : {cluster_details[i]['silhouette_score']}\",)\n\n        for i in cluster_details:\n            # read the image file\n            img = plt.imread(\n                f'kmeans_silhouette_plots/silhouette_score_{i}.png')\n            # display the image with resizing\n            aspect_ratio = img.shape[1] / img.shape[0]\n\n            # Set the width and calculate height to maintain aspect ratio\n            plt.figure(figsize=(12, 12 * aspect_ratio))\n\n            plt.imshow(img)\n            plt.axis('off')\n            plt.show()\n\n    except Exception as e:\n        print(e)\n        print('Error reading cluster_details.json file. Please run the script with run_K_mean_silhouette=True to generate the file.')\n\n```\n\n## K-Means Clustering for Four Clusters\n\n```{python}\n# Perform KMeans clustering\nkmeans = KMeans(n_clusters=4, random_state=10, n_init=10).fit(X)\n\n# Add cluster labels to DataFrame\nuser_df['cluster'] = kmeans.labels_\n\n# Group data by cluster and count the size of each cluster\ngrp_df = user_df.groupby([\"city\",\"cluster\"]).size()\n# grp_df\ngrp_df = grp_df.reset_index().pivot_table(index=\"city\",columns=\"cluster\", aggfunc=\"sum\")\n# Get sum of each row (total value per country)\ntotal_values = grp_df.sum(axis=1)\n# Calculate percentages for each value relative to row total\ngrp_df = grp_df.div(total_values, axis=0).mul(100)\ngrp_df = grp_df.unstack().droplevel(0).reset_index()\ngrp_df.rename(columns={0:\"proportion\"}, inplace=True)\n\n# Sort index for plotting\ngrp_df = grp_df.sort_index()\ngrp_df[\"cluster\"] = grp_df[\"cluster\"].astype(str)\n\n# Create bar chart\nfig = px.bar(grp_df, x='city', y='proportion', color=\"cluster\")\nfig.update_xaxes(title_text='City')\nfig.update_yaxes(title_text='% of users')\nfig.show()\n\n```\n\n# Describing The Clusters\nWith four clusters and the above descriptive statistics, we can define the clusters as follows:\nCluster 0 (Local infrequency): These are occassional users who do not use the system during the winter. They may use it during the evening.\nCluster 1 (Tourist): These are occassional users who do not use the system during the winter. They may use it during the evening. They differ from Cluster 0 in that they are more likely to make one-way trips and make slightly fewer trips.\nCluster 2 (Frequent): These are the most frequent users of the system. They make many trips and are likely to make a trip during the winter months.\nClsuter 3 (Frequent social): These are frequent users of the system. They are slightly more likely to make one-way and night trips than Cluster 2 users.\n\n```{python}\n\ncluster_desc = {\n    0: \"Local infrequency\",\n    1: \"Tourist\",\n    2: \"Frequent\",\n    3: \"Frequent social\"\n}\ngrouped_df = user_df.groupby('cluster')\n\n# Generate descriptive statistics for each group and display\nfor cluster, group in grouped_df:\n    group_desc = group.describe().drop(columns=['user_id', 'cluster'])\n    \n    # line break after each table\n    display(Markdown(\"\"))\n\n    #Print Cluster Description txt\n    display(Markdown(f\"#### Statistics for Cluster {cluster} ({cluster_desc[cluster]})\"))\n    \n    # print the cluster description details\n    display(Markdown(group_desc.to_markdown()))\n\n```\n\n\n## Potential Additional Dimensions to Explore:\n- Use date to get weekday vs. weekend\n- Travel speed (duration seems a bit inaccurate for some trips, so may be hard to have confidence, and we do not have route distance)","srcMarkdownNoYaml":"\n```{python}\nimport pandas as pd\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import silhouette_samples, silhouette_score\nimport matplotlib.cm as cm\nimport plotly.express as px\nfrom IPython.display import display, Markdown\n\n\nuser_df = pd.read_csv('data/user_data.csv')\ncluster_cols = ['trip_ct', 'is_winter', 'is_night','one_way', 'duration']\nX = user_df.loc[:, cluster_cols].fillna(-1).values\n```\n\n## Introduction\nWe were interested in how user patterns might vary between Omaha and Lincoln. Omaha is a larger city (metro population of about one million people), whereas Lincoln is about a quarter of the size and a college town. To compare users, we first filtered out admin and other invalid trips. Most of the available data pertains to time, so we made maximum use of the timestamps. We considered if a person made a trip in the winter (defined as December, January, February, and March) as a measure of their being an all-season cyclist. We also considered if they biked at night. Nightfall is a bit of a tricky variable. Fortunately, the Python `suntime` package can give us the sunrise and sunset time on any day, adjusting for latitude and daylight saving time. We consider whether a trip is one-way, meaning it returns to the same station at which it started its trip. This variable provides an indication of if the trip was utilitarian or recreational. Finally, we consider the trip count and average duration of trips by user.\n\n## Perform Siloutte Analysis To Define K Value for K-Means Clustering\nWe use the k-means clustering to define user groups. This algorithm clusters observations (in our case users) in order to maximize the cross-cluster variation in the input *features*. Our *features* are defined by the variables described above. We use siloutte analysis to find the optimal number of clusters. The silhouette value is a measure of how similar an observation is to its own cluster (cohesion) compared to other clusters (separation). The silhouette ranges from âˆ’1 to +1, where a high value indicates that the object is well matched to its own cluster and poorly matched to neighboring clusters. Our results suggest the that four clusters are ideal here.\n\n```{python}\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples, silhouette_score\nimport matplotlib.cm as cm\nimport json\nimport os\n\n\nrun_K_mean_silhouette = False\n\ncluster_details = {}\n\nif run_K_mean_silhouette:\n\n    range_n_clusters = [2, 3, 4, 5, 6]\n\n    for n_clusters in range_n_clusters:\n        # Create a subplot with 1 row and 2 columns\n        fig, (ax1, ax2) = plt.subplots(1, 2)\n        fig.set_size_inches(18, 7)\n\n        # The 1st subplot is the silhouette plot\n        # The silhouette coefficient can range from -1, 1\n        ax1.set_xlim([-1, 1])\n        # The (n_clusters+1)*10 is for inserting blank space between silhouette\n        # plots of individual clusters, to demarcate them clearly.\n        ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n\n        # Initialize the clusterer with n_clusters value and a random generator\n        # seed of 10 for reproducibility.\n        clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n        cluster_labels = clusterer.fit_predict(X)\n\n        # The silhouette_score gives the average value for all the samples.\n        # This gives a perspective into the density and separation of the formed\n        # clusters\n        silhouette_avg = silhouette_score(X, cluster_labels)\n        print(\n            \"For n_clusters =\",\n            n_clusters,\n            \"The average silhouette_score is :\",\n            silhouette_avg,\n        )\n\n        cluster_details[n_clusters] = {\n            \"silhouette_score\": silhouette_avg,\n        }\n\n        # Compute the silhouette scores for each sample\n        sample_silhouette_values = silhouette_samples(X, cluster_labels)\n\n        y_lower = 10\n        for i in range(n_clusters):\n            # Aggregate the silhouette scores for samples belonging to\n            # cluster i, and sort them\n            ith_cluster_silhouette_values = sample_silhouette_values[cluster_labels == i]\n\n            ith_cluster_silhouette_values.sort()\n\n            size_cluster_i = ith_cluster_silhouette_values.shape[0]\n            y_upper = y_lower + size_cluster_i\n\n            color = cm.nipy_spectral(float(i) / n_clusters)\n            ax1.fill_betweenx(\n                np.arange(y_lower, y_upper),\n                0,\n                ith_cluster_silhouette_values,\n                facecolor=color,\n                edgecolor=color,\n                alpha=0.7,\n            )\n\n            # Label the silhouette plots with their cluster numbers at the middle\n            ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n            # Compute the new y_lower for next plot\n            y_lower = y_upper + 10  # 10 for the 0 samples\n\n        ax1.set_title(\"The silhouette plot for the various clusters.\")\n        ax1.set_xlabel(\"The silhouette coefficient values\")\n        ax1.set_ylabel(\"Cluster label\")\n\n        # The vertical line for average silhouette score of all the values\n        ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n        ax1.set_yticks([])  # Clear the yaxis labels / ticks\n        ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\n        # 2nd Plot showing the actual clusters formed\n        colors = cm.nipy_spectral(cluster_labels.astype(float) / n_clusters)\n        ax2.scatter(\n            X[:, 0], X[:, 1], marker=\".\", s=30, lw=0, alpha=0.7, c=colors, edgecolor=\"k\"\n        )\n\n        # Labeling the clusters\n        centers = clusterer.cluster_centers_\n        # Draw white circles at cluster centers\n        ax2.scatter(\n            centers[:, 0],\n            centers[:, 1],\n            marker=\"o\",\n            c=\"white\",\n            alpha=1,\n            s=200,\n            edgecolor=\"k\",\n        )\n\n        for i, c in enumerate(centers):\n            ax2.scatter(c[0], c[1], marker=\"$%d$\" %\n                        i, alpha=1, s=50, edgecolor=\"k\")\n\n        ax2.set_title(\"The visualization of the clustered data.\")\n        ax2.set_xlabel(\"Feature space for the 1st feature\")\n        ax2.set_ylabel(\"Feature space for the 2nd feature\")\n\n        plt.suptitle(\n            \"Silhouette analysis for KMeans clustering on sample data with n_clusters = %d\"\n            % n_clusters,\n            fontsize=14,\n            fontweight=\"bold\",\n        )\n\n        # Save the figure\n        os.makedirs('kmeans_silhouette_plots', exist_ok=True)\n        fig_width = 20  # Set the figure width to 20 inches\n        aspect_ratio = fig.get_figheight() / fig.get_figwidth()\n        fig_height = fig_width * aspect_ratio\n        fig.set_size_inches(fig_width, fig_height)\n        plt.savefig(\n            f'kmeans_silhouette_plots/silhouette_score_{n_clusters}.png', dpi=700, bbox_inches='tight', pad_inches=0.2)\n        plt.close(fig)\n\n    with open('data/cluster_details.json', 'w') as f:\n        json.dump(cluster_details, f)\n\nelse:\n    try:\n        with open('data/cluster_details.json', 'r') as f:\n            cluster_details = json.load(f)\n\n        for i in cluster_details:\n            print(f\"For n_clusters = {i} The average silhouette_score is : {cluster_details[i]['silhouette_score']}\",)\n\n        for i in cluster_details:\n            # read the image file\n            img = plt.imread(\n                f'kmeans_silhouette_plots/silhouette_score_{i}.png')\n            # display the image with resizing\n            aspect_ratio = img.shape[1] / img.shape[0]\n\n            # Set the width and calculate height to maintain aspect ratio\n            plt.figure(figsize=(12, 12 * aspect_ratio))\n\n            plt.imshow(img)\n            plt.axis('off')\n            plt.show()\n\n    except Exception as e:\n        print(e)\n        print('Error reading cluster_details.json file. Please run the script with run_K_mean_silhouette=True to generate the file.')\n\n```\n\n## K-Means Clustering for Four Clusters\n\n```{python}\n# Perform KMeans clustering\nkmeans = KMeans(n_clusters=4, random_state=10, n_init=10).fit(X)\n\n# Add cluster labels to DataFrame\nuser_df['cluster'] = kmeans.labels_\n\n# Group data by cluster and count the size of each cluster\ngrp_df = user_df.groupby([\"city\",\"cluster\"]).size()\n# grp_df\ngrp_df = grp_df.reset_index().pivot_table(index=\"city\",columns=\"cluster\", aggfunc=\"sum\")\n# Get sum of each row (total value per country)\ntotal_values = grp_df.sum(axis=1)\n# Calculate percentages for each value relative to row total\ngrp_df = grp_df.div(total_values, axis=0).mul(100)\ngrp_df = grp_df.unstack().droplevel(0).reset_index()\ngrp_df.rename(columns={0:\"proportion\"}, inplace=True)\n\n# Sort index for plotting\ngrp_df = grp_df.sort_index()\ngrp_df[\"cluster\"] = grp_df[\"cluster\"].astype(str)\n\n# Create bar chart\nfig = px.bar(grp_df, x='city', y='proportion', color=\"cluster\")\nfig.update_xaxes(title_text='City')\nfig.update_yaxes(title_text='% of users')\nfig.show()\n\n```\n\n# Describing The Clusters\nWith four clusters and the above descriptive statistics, we can define the clusters as follows:\nCluster 0 (Local infrequency): These are occassional users who do not use the system during the winter. They may use it during the evening.\nCluster 1 (Tourist): These are occassional users who do not use the system during the winter. They may use it during the evening. They differ from Cluster 0 in that they are more likely to make one-way trips and make slightly fewer trips.\nCluster 2 (Frequent): These are the most frequent users of the system. They make many trips and are likely to make a trip during the winter months.\nClsuter 3 (Frequent social): These are frequent users of the system. They are slightly more likely to make one-way and night trips than Cluster 2 users.\n\n```{python}\n\ncluster_desc = {\n    0: \"Local infrequency\",\n    1: \"Tourist\",\n    2: \"Frequent\",\n    3: \"Frequent social\"\n}\ngrouped_df = user_df.groupby('cluster')\n\n# Generate descriptive statistics for each group and display\nfor cluster, group in grouped_df:\n    group_desc = group.describe().drop(columns=['user_id', 'cluster'])\n    \n    # line break after each table\n    display(Markdown(\"\"))\n\n    #Print Cluster Description txt\n    display(Markdown(f\"#### Statistics for Cluster {cluster} ({cluster_desc[cluster]})\"))\n    \n    # print the cluster description details\n    display(Markdown(group_desc.to_markdown()))\n\n```\n\n\n## Potential Additional Dimensions to Explore:\n- Use date to get weekday vs. weekend\n- Travel speed (duration seems a bit inaccurate for some trips, so may be hard to have confidence, and we do not have route distance)"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"section-divs":true,"output-file":"Clustering.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","editor":{"render-on-save":true},"theme":["yeti","../../styles/custom.scss"],"grid":{"margin-width":"500px"},"title":"Bikeshare User Clustering","sidebar":"Project"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}